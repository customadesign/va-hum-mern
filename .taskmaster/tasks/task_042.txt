# Task ID: 42
# Title: Deploy Linkage Backend API (Render)
# Status: pending
# Dependencies: 41
# Priority: high
# Description: Create and configure the backend web service for Linkage VA Hub.
# Details:
- Create Render Web Service (root: backend)
- Build: npm install; Start: node server.js; Port: 8000
- Env:
  - NODE_ENV=production
  - PORT=8000
  - MONGODB_URI=<atlas-uri>
  - CLIENT_URL=https://linkage-va-hub.onrender.com
  - ESYSTEMS_CLIENT_URL=https://esystems-frontend.onrender.com (if E‑Systems)
  - JWT_SECRET (generated), JWT_EXPIRE=30d
  - CLERK_SECRET_KEY, CLERK_PUBLISHABLE_KEY (same pk_ as frontend)
  - CLERK_FRONTEND_API, CLERK_JWKS_URL
- Optional: Supabase/AWS keys
- Health path: /api/health

# Test Strategy:
- Visit https://<api>.onrender.com/api/health → status healthy

# Subtasks:
## 1. Set MongoDB Atlas and connect from Render [pending]
### Dependencies: None
### Description: Create DB user, copy mongodb+srv URI, whitelist 0.0.0.0/0 (or Render static IPs), set MONGODB_URI on backend service.
### Details:
- Atlas → Database Access: create user (readWriteAnyDatabase)
- Atlas → Network Access: add IP 0.0.0.0/0 (temporary) or Render egress IPs
- Copy connection string; include db name and creds
- Render → linkage-va-hub-api → Environment: MONGODB_URI=<copied URI>
- Redeploy

## 2. Enable LinkedIn OAuth in production (frontend + backend) [pending]
### Dependencies: None
### Description: Configure LinkedIn OAuth for Linkage (and E‑Systems if needed) so the LinkedIn button works.
### Details:
Frontend (Static Site: linkage-va-hub)
- Set REACT_APP_LINKEDIN_CLIENT_ID = <your LinkedIn app Client ID>
- Save, Clear build cache, Redeploy

Backend (Web Service: linkage-va-hub-api)
- Set LINKEDIN_CLIENT_ID = <Client ID>
- Set LINKEDIN_CLIENT_SECRET = <Client Secret>
- Optional: LINKEDIN_REDIRECT_URI = https://linkage-va-hub.onrender.com/auth/linkedin/callback
- Redeploy backend

LinkedIn Developer Portal
- Enable “Sign In with LinkedIn using OpenID Connect”
- Add Authorized redirect URL: https://linkage-va-hub.onrender.com/auth/linkedin/callback
- (If E‑Systems) also add: https://esystems-management-hub.onrender.com/auth/linkedin/callback

Verify
- GET https://linkage-va-hub-api.onrender.com/api/health/auth → authentication.oauth.linkedin.configured: true
- Click the LinkedIn button → redirects to LinkedIn → returns to /auth/linkedin/callback → success

Notes
- The frontend toast appears when REACT_APP_LINKEDIN_CLIENT_ID is missing.
- Backend will return 403 if LINKEDIN_CLIENT_ID/SECRET aren’t set.
- If the API returns 502, restart the backend service on Render and re-test.

## 3. Fix LinkedIn callback to post to API origin [pending]
### Dependencies: None
### Description: Frontend is posting the authorization code to the frontend domain instead of the backend API, leaving users on /auth/linkedin/callback.
### Details:
Edit `frontend/src/services/linkedinAuth.js`:
- Use API origin (from `REACT_APP_API_URL`) for token exchange:
  - const API_ORIGIN = new URL(process.env.REACT_APP_API_URL).origin
  - POST to `${API_ORIGIN}/api/auth/linkedin/callback`
- Keep redirectUri pointing to the frontend domain:
  - const FRONTEND_URL = brand==='esystems' ? 'https://esystems-frontend.onrender.com' : 'https://linkage-va-hub.onrender.com'
  - redirectUri = `${FRONTEND_URL}/auth/linkedin/callback`
- For E‑Systems shared backend, `REACT_APP_API_URL=https://linkage-va-hub-api.onrender.com/api`; for separate backend use its origin.
- Redeploy frontend.

Expected: after LinkedIn returns with `code`, the callback page exchanges it via API and navigates to `/dashboard` or profile.

