import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../services/api';
import { 
  CogIcon,
  EnvelopeIcon,
  ShieldCheckIcon,
  SparklesIcon,
  AdjustmentsHorizontalIcon,
  MagnifyingGlassIcon,
  CheckCircleIcon,
  ExclamationCircleIcon,
  ArrowPathIcon,
  ClockIcon,
  ServerIcon,
  DocumentTextIcon,
  VideoCameraIcon,
  ChatBubbleLeftRightIcon,
  AcademicCapIcon,
  MegaphoneIcon,
  UserGroupIcon,
  CloudArrowUpIcon,
  BoltIcon,
  PencilSquareIcon,
  CalendarDaysIcon,
  UserPlusIcon,
  XMarkIcon,
  ChevronRightIcon,
  ChevronDownIcon
} from '@heroicons/react/24/outline';
import { CheckIcon } from '@heroicons/react/24/solid';

const Settings = () => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [settings, setSettings] = useState({});
  const [originalSettings, setOriginalSettings] = useState({});
  const [activeCategory, setActiveCategory] = useState('general');
  const [searchQuery, setSearchQuery] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [errors, setErrors] = useState({});
  const [modifiedFields, setModifiedFields] = useState(new Set());
  const [isMobile, setIsMobile] = useState(window.innerWidth < 1024);
  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);
  
  // SendGrid-specific state
  const [sendgridValidation, setSendgridValidation] = useState({
    isValidating: false,
    connectionStatus: 'not_tested',
    domainAuthentication: 'unknown',
    senderIdentityStatus: 'unknown',
    lastValidated: null
  });
  
  // Admin Invitations specific state
  const [invitations, setInvitations] = useState([]);
  const [inviteForm, setInviteForm] = useState({ email: '', message: '' });
  const [invitationError, setInvitationError] = useState('');
  const [invitationSuccess, setInvitationSuccess] = useState('');
  const [invitationsLoading, setInvitationsLoading] = useState(false);

  // Category configurations with enhanced organization
  const categories = {
    general: {
      name: 'General',
      icon: CogIcon,
      description: 'Basic site configuration and information',
      color: 'blue'
    },
    admin: {
      name: 'Admin Management',
      icon: UserPlusIcon,
      description: 'Manage administrator invitations and access',
      color: 'indigo'
    },
    email: {
      name: 'Email & Notifications',
      icon: EnvelopeIcon,
      description: 'SMTP and email delivery settings',
      color: 'green'
    },
    security: {
      name: 'Security & Auth',
      icon: ShieldCheckIcon,
      description: 'Authentication and security policies',
      color: 'red'
    },
    features: {
      name: 'Features & Permissions',
      icon: SparklesIcon,
      description: 'Enable or disable platform features',
      color: 'purple'
    },
    limits: {
      name: 'System Limits',
      icon: AdjustmentsHorizontalIcon,
      description: 'Configure system constraints and limits',
      color: 'yellow'
    }
  };

  // Field configurations (keeping all existing fields from SystemSettings)
  const fieldConfigs = {
    // General Settings
    site_name: {
      label: 'Site Name',
      type: 'text',
      category: 'general',
      icon: DocumentTextIcon,
      help: 'The name of your platform displayed throughout the site',
      required: true
    },
    site_url: {
      label: 'Site URL',
      type: 'url',
      category: 'general',
      icon: ServerIcon,
      help: 'The main URL where your platform is hosted',
      required: true,
      pattern: '^https?://.+'
    },
    admin_email: {
      label: 'Admin Email',
      type: 'email',
      category: 'general',
      icon: EnvelopeIcon,
      help: 'Primary administrator email for system notifications',
      required: true
    },
    support_email: {
      label: 'Support Email',
      type: 'email',
      category: 'general',
      icon: ChatBubbleLeftRightIcon,
      help: 'Email address for user support inquiries',
      required: true
    },
    timezone: {
      label: 'Timezone',
      type: 'select',
      category: 'general',
      icon: ClockIcon,
      help: 'Default timezone for the platform',
      options: [
        { value: 'UTC', label: 'UTC' },
        { value: 'America/New_York', label: 'Eastern Time' },
        { value: 'America/Chicago', label: 'Central Time' },
        { value: 'America/Denver', label: 'Mountain Time' },
        { value: 'America/Los_Angeles', label: 'Pacific Time' },
        { value: 'Europe/London', label: 'London' },
        { value: 'Europe/Paris', label: 'Paris' },
        { value: 'Asia/Tokyo', label: 'Tokyo' },
        { value: 'Australia/Sydney', label: 'Sydney' }
      ]
    },
    maintenance_mode: {
      label: 'Maintenance Mode',
      type: 'toggle',
      category: 'general',
      icon: AdjustmentsHorizontalIcon,
      help: 'Enable maintenance mode to prevent user access during updates'
    },
    maintenance_message: {
      label: 'Maintenance Message',
      type: 'textarea',
      category: 'general',
      icon: MegaphoneIcon,
      help: 'Message displayed to users when maintenance mode is active',
      dependsOn: 'maintenance_mode'
    },

    // SendGrid Configuration
    sendgrid_api_key: {
      label: 'SendGrid API Key',
      type: 'password',
      category: 'email',
      icon: ShieldCheckIcon,
      help: 'Your SendGrid API key (starts with "SG.")',
      required: true,
      placeholder: 'SG.••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••',
      validateAsync: true
    },
    sendgrid_sender_identity: {
      label: 'Verified Sender Email',
      type: 'email',
      category: 'email',
      icon: EnvelopeIcon,
      help: 'Must be a verified sender identity in your SendGrid account',
      required: true,
      dependsOn: 'sendgrid_api_key'
    },
    sendgrid_domain_authentication: {
      label: 'Domain Authentication Status',
      type: 'display',
      category: 'email',
      icon: CheckCircleIcon,
      help: 'Shows whether your domain is authenticated with SendGrid',
      dependsOn: 'sendgrid_api_key'
    },
    sendgrid_connection_status: {
      label: 'Connection Status',
      type: 'display',
      category: 'email',
      icon: CheckCircleIcon,
      help: 'Real-time connection status to SendGrid API',
      dependsOn: 'sendgrid_api_key'
    },
    email_from: {
      label: 'From Email',
      type: 'email',
      category: 'email',
      icon: EnvelopeIcon,
      help: 'Default sender email address',
      required: true
    },
    email_from_name: {
      label: 'From Name',
      type: 'text',
      category: 'email',
      icon: PencilSquareIcon,
      help: 'Default sender name for emails',
      required: true
    },

    // Security Settings
    password_min_length: {
      label: 'Minimum Password Length',
      type: 'number',
      category: 'security',
      icon: ShieldCheckIcon,
      help: 'Minimum number of characters required for passwords',
      min: 6,
      max: 32,
      default: 8
    },
    session_timeout: {
      label: 'Session Timeout (minutes)',
      type: 'number',
      category: 'security',
      icon: ClockIcon,
      help: 'Automatically log out users after this period of inactivity',
      min: 5,
      max: 1440,
      default: 60
    },
    max_login_attempts: {
      label: 'Max Login Attempts',
      type: 'number',
      category: 'security',
      icon: ExclamationCircleIcon,
      help: 'Number of failed login attempts before account lockout',
      min: 3,
      max: 10,
      default: 5
    },
    account_lock_duration: {
      label: 'Account Lock Duration (minutes)',
      type: 'number',
      category: 'security',
      icon: ClockIcon,
      help: 'How long to lock an account after max login attempts',
      min: 5,
      max: 60,
      default: 15
    },
    enable_2fa: {
      label: 'Enable Two-Factor Authentication',
      type: 'toggle',
      category: 'security',
      icon: ShieldCheckIcon,
      help: 'Allow users to enable 2FA for their accounts'
    },
    require_email_verification: {
      label: 'Require Email Verification',
      type: 'toggle',
      category: 'security',
      icon: EnvelopeIcon,
      help: 'Users must verify their email before accessing the platform'
    },

    // Feature Toggles
    registration_enabled: {
      label: 'Registration Enabled',
      type: 'toggle',
      category: 'features',
      icon: UserGroupIcon,
      help: 'Allow new users to register on the platform'
    },
    va_approval_required: {
      label: 'VA Approval Required',
      type: 'toggle',
      category: 'features',
      icon: CheckCircleIcon,
      help: 'Virtual assistants require admin approval before activation'
    },
    business_approval_required: {
      label: 'Business Approval Required',
      type: 'toggle',
      category: 'features',
      icon: CheckCircleIcon,
      help: 'Business accounts require admin approval before activation'
    },
    messaging_enabled: {
      label: 'Messaging Enabled',
      type: 'toggle',
      category: 'features',
      icon: ChatBubbleLeftRightIcon,
      help: 'Enable direct messaging between users'
    },
    video_calls_enabled: {
      label: 'Video Calls Enabled',
      type: 'toggle',
      category: 'features',
      icon: VideoCameraIcon,
      help: 'Enable video calling functionality'
    },
    file_sharing_enabled: {
      label: 'File Sharing Enabled',
      type: 'toggle',
      category: 'features',
      icon: CloudArrowUpIcon,
      help: 'Allow users to share files through the platform'
    },
    courses_enabled: {
      label: 'Courses Enabled',
      type: 'toggle',
      category: 'features',
      icon: AcademicCapIcon,
      help: 'Enable the learning management system features'
    },
    announcements_enabled: {
      label: 'Announcements Enabled',
      type: 'toggle',
      category: 'features',
      icon: MegaphoneIcon,
      help: 'Enable platform-wide announcements'
    },

    // System Limits
    max_vas_per_page: {
      label: 'VAs Per Page',
      type: 'number',
      category: 'limits',
      icon: UserGroupIcon,
      help: 'Number of virtual assistants displayed per page',
      min: 10,
      max: 100,
      default: 20
    },
    max_businesses_per_page: {
      label: 'Businesses Per Page',
      type: 'number',
      category: 'limits',
      icon: UserGroupIcon,
      help: 'Number of businesses displayed per page',
      min: 10,
      max: 100,
      default: 20
    },
    max_file_size: {
      label: 'Max File Size (MB)',
      type: 'number',
      category: 'limits',
      icon: CloudArrowUpIcon,
      help: 'Maximum allowed file upload size in megabytes',
      min: 1,
      max: 100,
      default: 10
    },
    max_profile_images: {
      label: 'Max Profile Images',
      type: 'number',
      category: 'limits',
      icon: DocumentTextIcon,
      help: 'Maximum number of profile images per user',
      min: 1,
      max: 20,
      default: 5
    },
    max_portfolio_items: {
      label: 'Max Portfolio Items',
      type: 'number',
      category: 'limits',
      icon: DocumentTextIcon,
      help: 'Maximum number of portfolio items per VA',
      min: 1,
      max: 50,
      default: 10
    },
    rate_limit_window: {
      label: 'Rate Limit Window (seconds)',
      type: 'number',
      category: 'limits',
      icon: ClockIcon,
      help: 'Time window for rate limiting',
      min: 1,
      max: 3600,
      default: 60
    },
    rate_limit_max_requests: {
      label: 'Max Requests',
      type: 'number',
      category: 'limits',
      icon: BoltIcon,
      help: 'Maximum requests allowed within rate limit window',
      min: 10,
      max: 1000,
      default: 100
    },
    invitation_expiry_days: {
      label: 'Invitation Expiry (days)',
      type: 'number',
      category: 'limits',
      icon: CalendarDaysIcon,
      help: 'Days before an admin invitation expires',
      min: 1,
      max: 30,
      default: 7
    }
  };

  // Helper function to get cookie value
  const getCookie = (name) => {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  };

  // Fetch settings from backend
  const fetchSettings = useCallback(async () => {
    try {
      setLoading(true);
      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      console.log('Fetching settings from:', `${API_URL}/admin/configs`);
      
      const response = await fetch(`${API_URL}/admin/configs`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Settings fetch response:', data);
        
        let flatSettings = {};
        
        // Adjust for the flat structure from SiteConfig
        if (data.data) {
          Object.keys(data.data).forEach(key => {
            flatSettings[key] = data.data[key].value;
          });
        }
        
        console.log('Processed settings:', flatSettings);
        setSettings(flatSettings);
        setOriginalSettings(flatSettings);

        // After fetching, potentially validate SendGrid if key is present
        if (flatSettings.sendgrid_api_key && flatSettings.sendgrid_api_key.startsWith('SG.') && flatSettings.sendgrid_api_key.length > 20) {
          validateSendGridCredentials(flatSettings.sendgrid_api_key);
        }

      } else {
        console.error('Settings fetch failed:', response.status, response.statusText);
        const errorData = await response.json().catch(() => ({}));
        console.error('Error details:', errorData);
        
        // Initialize with defaults on error or no settings found
        const defaults = {};
        Object.entries(fieldConfigs).forEach(([field, config]) => {
          if (config.default !== undefined) {
            defaults[field] = config.default;
          } else {
            // Ensure all fields from fieldConfigs are present in settings, even if undefined
            defaults[field] = undefined;
          }
        });
        setSettings(defaults);
        setOriginalSettings(defaults);
      }
    } catch (err) {
      console.error('Error fetching settings:', err);
      
      // Initialize with defaults on network error or any other error
      const defaults = {};
      Object.entries(fieldConfigs).forEach(([field, config]) => {
        if (config.default !== undefined) {
          defaults[field] = config.default;
        } else {
          // Ensure all fields from fieldConfigs are present in settings, even if undefined
          defaults[field] = undefined;
        }
      });
      setSettings(defaults);
      setOriginalSettings(defaults);
    } finally {
      setLoading(false);
    }
  }, []);

  // Fetch admin invitations
  const fetchInvitations = async () => {
    try {
      setInvitationsLoading(true);
      setInvitationError('');
      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        setInvitations(data.invitations || data.data || []);
      } else if (response.status === 404) {
        setInvitations([]);
        setInvitationError('Admin invitation feature is not yet implemented on the backend');
      } else {
        throw new Error('Failed to fetch invitations');
      }
    } catch (err) {
      setInvitationError('Admin invitation feature is not yet available');
      console.error('Error fetching invitations:', err);
      setInvitations([]);
    } finally {
      setInvitationsLoading(false);
    }
  };

  // Send invitation
  const handleSendInvitation = async (e) => {
    e.preventDefault();
    if (!inviteForm.email.trim()) {
      setInvitationError('Email is required');
      return;
    }

    try {
      setInvitationsLoading(true);
      setInvitationError('');
      setInvitationSuccess('');

      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(inviteForm)
      });

      const data = await response.json();

      if (response.ok) {
        setInvitationSuccess('Invitation sent successfully!');
        setInviteForm({ email: '', message: '' });
        fetchInvitations();
      } else if (response.status === 404) {
        setInvitationError('Admin invitation feature is not yet implemented on the backend');
      } else {
        throw new Error(data.message || 'Failed to send invitation');
      }
    } catch (err) {
      setInvitationError('Admin invitation feature is not yet available');
      console.error('Error sending invitation:', err);
    } finally {
      setInvitationsLoading(false);
    }
  };

  // Cancel invitation
  const handleCancelInvitation = async (invitationId) => {
    if (!window.confirm('Are you sure you want to cancel this invitation?')) {
      return;
    }

    try {
      setInvitationsLoading(true);
      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations/${invitationId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (response.ok) {
        setInvitationSuccess('Invitation cancelled successfully');
        fetchInvitations();
      } else if (response.status === 404) {
        setInvitationError('Admin invitation feature is not yet implemented on the backend');
      } else {
        throw new Error('Failed to cancel invitation');
      }
    } catch (err) {
      setInvitationError('Admin invitation feature is not yet available');
      console.error('Error cancelling invitation:', err);
    } finally {
      setInvitationsLoading(false);
    }
  };

  // Resend invitation
  const handleResendInvitation = async (invitationId) => {
    try {
      setInvitationsLoading(true);
      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations/${invitationId}/resend`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (response.ok) {
        setInvitationSuccess('Invitation resent successfully');
        fetchInvitations();
      } else if (response.status === 404) {
        setInvitationError('Admin invitation feature is not yet implemented on the backend');
      } else {
        throw new Error('Failed to resend invitation');
      }
    } catch (err) {
      setInvitationError('Admin invitation feature is not yet available');
      console.error('Error resending invitation:', err);
    } finally {
      setInvitationsLoading(false);
    }
  };

  // Save settings
    console.log("=== handleSave called ===");
    console.log("Modified fields count:", modifiedFields.size);
    console.log("Modified fields:", Array.from(modifiedFields));
    console.log("Current settings:", settings);
    console.log("Original settings:", originalSettings);  const handleSave = async () => {
    try {
      setSaving(true);
      setErrors({});
      setSaveSuccess(false);

      // Validate all fields
      const validationErrors = validateAllFields();
      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        setSaving(false);
        return;
      }

      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

      const modifiedConfigPairs = {};
      modifiedFields.forEach(field => {
        modifiedConfigPairs[field] = settings[field];
      });

      if (Object.keys(modifiedConfigPairs).length === 0) {
        setSaving(false);
        setSaveSuccess(true);
        setTimeout(() => setSaveSuccess(false), 3000);
        return;
      }

      console.log('Saving settings with data:', { configs: modifiedConfigPairs });

      const response = await fetch(`${API_URL}/admin/configs`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ configs: modifiedConfigPairs })
      });

      const data = await response.json();
      console.log('Settings save response:', data);

      if (response.ok && data.success) {
        // Update local settings with the returned data
        if (data.data) {
          let updatedSettings = {};
          Object.keys(data.data).forEach(key => {
            updatedSettings[key] = data.data[key].value;
          });
          setSettings(updatedSettings);
          setOriginalSettings(updatedSettings);
        }

        setModifiedFields(new Set());
        setSaveSuccess(true);

        // Show success message with details
        if (data.message) {
          console.log('Success:', data.message);
        }

        // Keep success message visible for 5 seconds
        setTimeout(() => setSaveSuccess(false), 5000);

        // If max_vas_per_page was updated, trigger a refresh on the VA page
        if (modifiedConfigPairs.max_vas_per_page !== undefined) {
          console.log('VAs per page setting updated to:', modifiedConfigPairs.max_vas_per_page);
          // The VA Management page will automatically use the new value on next fetch
        }
      } else if (response.status === 207 && data.updated && data.updated.length > 0) {
        // Partial success
        console.warn('Partial success:', data.message);

        // Update successfully saved settings
        if (data.updatedConfigs) {
          const newSettings = { ...settings };
          Object.keys(data.updatedConfigs).forEach(key => {
            newSettings[key] = data.updatedConfigs[key];
          });
          setSettings(newSettings);
        }

        // Show errors for failed updates
        if (data.errors && data.errors.length > 0) {
          const newErrors = {};
          data.errors.forEach(err => {
            newErrors[err.key] = err.error;
          });
          setErrors(newErrors);
        }

        // Remove successfully updated fields from modified list
        const stillModified = new Set(modifiedFields);
        if (data.updated) {
          data.updated.forEach(update => {
            stillModified.delete(update.key);
          });
        }
        setModifiedFields(stillModified);

        // Show partial success message
        setSaveSuccess(true);
        setTimeout(() => setSaveSuccess(false), 5000);
      } else {
        // Complete failure
        console.error('Failed to save settings:', data);

        // Map backend errors to frontend fields if available
        const newErrors = {};
        if (data.errors && Array.isArray(data.errors)) {
          data.errors.forEach(err => {
            if (err.key) {
              newErrors[err.key] = err.error;
            } else if (err.param) {
              newErrors[err.param] = err.msg;
            }
          });
        }

        if (Object.keys(newErrors).length === 0) {
          newErrors.general = data.message || data.error || 'Failed to save settings';
        }

        setErrors(newErrors);
      }
    } catch (err) {
      console.error('Error saving settings:', err);
      setErrors({ general: 'Network error while saving settings. Please check your connection.' });
    } finally {
      setSaving(false);
    }
  };

  // SendGrid validation function
  const validateSendGridCredentials = async (apiKey) => {
    try {
      setSendgridValidation(prev => ({ ...prev, isValidating: true }));
      
      const token = getCookie('authToken');
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/settings/validate-sendgrid`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ apiKey })
      });

      const data = await response.json();
      
      if (response.ok) {
        setSendgridValidation(prev => ({
          ...prev,
          isValidating: false,
          connectionStatus: 'connected',
          domainAuthentication: data.domainAuthenticated ? 'verified' : 'not_verified',
          senderIdentityStatus: data.senderIdentities?.length > 0 ? 'verified' : 'not_verified',
          lastValidated: new Date(),
          validationData: data
        }));
        
        // Update settings with validated sender identity
        if (data.senderIdentities?.length > 0) {
          setSettings(prev => ({
            ...prev,
            sendgrid_sender_identity: data.senderIdentities[0].email
          }));
        }
      } else {
        setSendgridValidation(prev => ({
          ...prev,
          isValidating: false,
          connectionStatus: 'error',
          domainAuthentication: 'unknown',
          senderIdentityStatus: 'unknown',
          lastValidated: new Date(),
          error: data.error || 'Failed to validate SendGrid credentials'
        }));
      }
    } catch (error) {
      console.error('SendGrid validation error:', error);
      setSendgridValidation(prev => ({
        ...prev,
        isValidating: false,
        connectionStatus: 'error',
        domainAuthentication: 'unknown',
        senderIdentityStatus: 'unknown',
        lastValidated: new Date(),
        error: 'Network error during validation'
      }));
    }
  };

  // Handle field change
  const handleFieldChange = (field, value) => {
    console.log("handleFieldChange called:", { field, value, originalValue: originalSettings[field] });
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Track modified fields
    if (value !== originalSettings[field]) {
      console.log("Field modified, adding to modifiedFields:", field);
      setModifiedFields(prev => new Set(prev).add(field));
    } else {
      console.log("Field matches original, removing from modifiedFields:", field);
      setModifiedFields(prev => {
        const newSet = new Set(prev);
        newSet.delete(field);
        return newSet;
      });
    }
    
    // Clear error for this field
    setErrors(prev => {
      const newErrors = { ...prev };
      delete newErrors[field];
      return newErrors;
    });
    
    // Handle SendGrid API key validation
    if (field === 'sendgrid_api_key' && value && value.startsWith('SG.') && value.length > 20) {
      // Debounce the validation to avoid too many API calls
      const timeoutId = setTimeout(() => {
        validateSendGridCredentials(value);
      }, 1000);
      
      // Clear previous timeout
      if (window.sendgridValidationTimeout) {
        clearTimeout(window.sendgridValidationTimeout);
      }
      window.sendgridValidationTimeout = timeoutId;
    } else if (field === 'sendgrid_api_key') {
      // Reset validation status if API key is invalid format
      setSendgridValidation(prev => ({
        ...prev,
        connectionStatus: 'not_tested',
        domainAuthentication: 'unknown',
        senderIdentityStatus: 'unknown',
        error: null
      }));
    }
  };

  // Reset field to default
  const handleResetField = (field) => {
    const config = fieldConfigs[field];
    if (config && config.default !== undefined) {
      handleFieldChange(field, config.default);
    } else if (originalSettings[field] !== undefined) {
      handleFieldChange(field, originalSettings[field]);
    }
  };

  // Validate field
  const validateField = (field, value) => {
    const config = fieldConfigs[field];
    if (!config) return null;

    if (config.required && !value) {
      return `${config.label} is required`;
    }

    if (config.type === 'email' && value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(value)) {
        return 'Please enter a valid email address';
      }
    }

    if (config.type === 'url' && value) {
      try {
        new URL(value);
      } catch {
        return 'Please enter a valid URL';
      }
    }

    if (config.type === 'number' && value !== undefined && value !== '') {
      const num = Number(value);
      if (isNaN(num)) {
        return 'Please enter a valid number';
      }
      if (config.min !== undefined && num < config.min) {
        return `Minimum value is ${config.min}`;
      }
      if (config.max !== undefined && num > config.max) {
        return `Maximum value is ${config.max}`;
      }
    }

    return null;
  };

  // Validate all fields
  const validateAllFields = () => {
    const validationErrors = {};
    Object.keys(fieldConfigs).forEach(field => {
      const error = validateField(field, settings[field]);
      if (error) {
        validationErrors[field] = error;
      }
    });
    return validationErrors;
  };

  // Get filtered settings based on search
  const getFilteredSettings = () => {
    if (!searchQuery) return null;
    
    const query = searchQuery.toLowerCase();
    const filtered = {};
    
    Object.entries(fieldConfigs).forEach(([field, config]) => {
      if (
        field.toLowerCase().includes(query) ||
        config.label.toLowerCase().includes(query) ||
        config.help.toLowerCase().includes(query)
      ) {
        filtered[field] = config;
      }
    });
    
    return Object.keys(filtered).length > 0 ? filtered : null;
  };

  // Get settings for current category
  const getCategorySettings = useMemo(() => {
    return Object.entries(fieldConfigs)
      .filter(([_, config]) => config.category === activeCategory)
      .map(([field, _]) => field);
  }, [activeCategory]);

  // Format date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Get status badge color
  const getStatusBadgeColor = (status) => {
    switch (status) {
      case 'pending':
        return 'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-300';
      case 'accepted':
        return 'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300';
      case 'expired':
        return 'bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-300';
      case 'cancelled':
        return 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300';
      default:
        return 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300';
    }
  };

  // Render SendGrid status display component
  const renderSendGridStatus = (field, config) => {
    let statusInfo = { text: 'Not tested', color: 'gray', icon: ClockIcon };
    
    if (field === 'sendgrid_connection_status') {
      switch (sendgridValidation.connectionStatus) {
        case 'connected':
          statusInfo = { text: 'Connected', color: 'green', icon: CheckCircleIcon };
          break;
        case 'error':
          statusInfo = { text: 'Connection failed', color: 'red', icon: ExclamationCircleIcon };
          break;
        case 'not_tested':
          statusInfo = { text: 'Not tested', color: 'gray', icon: ClockIcon };
          break;
      }
    } else if (field === 'sendgrid_domain_authentication') {
      switch (sendgridValidation.domainAuthentication) {
        case 'verified':
          statusInfo = { text: 'Domain verified', color: 'green', icon: CheckCircleIcon };
          break;
        case 'not_verified':
          statusInfo = { text: 'Domain not verified', color: 'yellow', icon: ExclamationCircleIcon };
          break;
        case 'unknown':
          statusInfo = { text: 'Unknown', color: 'gray', icon: ClockIcon };
          break;
      }
    }

    const StatusIcon = statusInfo.icon;
    const colorClasses = {
      green: 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20',
      red: 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20',
      yellow: 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20',
      gray: 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20'
    };

    return (
      <div className={`flex items-center gap-2 px-3 py-2 rounded-md ${colorClasses[statusInfo.color]}`}>
        <StatusIcon className="w-4 h-4" />
        <span className="text-sm font-medium">{statusInfo.text}</span>
        {sendgridValidation.lastValidated && (
          <span className="text-xs opacity-75">
            (Last checked: {sendgridValidation.lastValidated.toLocaleTimeString()})
          </span>
        )}
        {sendgridValidation.isValidating && field === 'sendgrid_connection_status' && (
          <>
            <ArrowPathIcon className="w-4 h-4 animate-spin ml-2" />
            <span className="text-xs">Validating...</span>
          </>
        )}
      </div>
    );
  };

  // Render field component
  const renderField = (field, config) => {
    const value = settings[field];
    const error = errors[field];
    const isModified = modifiedFields.has(field);
    
    // Check dependencies
    if (config.dependsOn && !settings[config.dependsOn]) {
      return null;
    }

    return (
      <div key={field} className={`relative p-4 rounded-lg border ${error ? 'border-red-300 dark:border-red-600 bg-red-50 dark:bg-red-900/20' : 'border-admin-200 dark:border-gray-600 bg-white dark:bg-gray-800'} hover:shadow-sm transition-shadow`}>
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <div className="flex items-center gap-2 mb-1">
              {config.icon && <config.icon className="w-4 h-4 text-admin-400 dark:text-gray-500" />}
              <label className="text-sm font-medium text-admin-900 dark:text-white">
                {config.label}
                {config.required && <span className="text-red-500 dark:text-red-400 ml-1">*</span>}
                {isModified && (
                  <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 dark:bg-yellow-900/50 text-yellow-800 dark:text-yellow-300">
                    Modified
                  </span>
                )}
              </label>
            </div>
            
            <p className="text-xs text-admin-500 dark:text-gray-400 mb-3">{config.help}</p>
            
            {config.type === 'display' ? (
              renderSendGridStatus(field, config)
            ) : config.type === 'toggle' ? (
              <button
                onClick={() => handleFieldChange(field, !value)}
                className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                  value ? 'bg-blue-600 hover:bg-blue-700' : 'bg-red-500 hover:bg-red-600'
                }`}
              >
                <span
                  className={`inline-block h-4 w-4 transform rounded-full bg-white shadow-sm transition-transform ${
                    value ? 'translate-x-6' : 'translate-x-1'
                  }`}
                />
              </button>
            ) : config.type === 'select' ? (
              <select
                value={value || ''}
                onChange={(e) => handleFieldChange(field, e.target.value)}
                className="admin-input text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-admin-900 dark:text-white rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              >
                <option value="">Select...</option>
                {config.options.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            ) : config.type === 'textarea' ? (
              <textarea
                value={value || ''}
                onChange={(e) => handleFieldChange(field, e.target.value)}
                onBlur={() => {
                  const validationError = validateField(field, value);
                  if (validationError) {
                    setErrors(prev => ({ ...prev, [field]: validationError }));
                  }
                }}
                className="admin-input text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-admin-900 dark:text-white placeholder-admin-500 dark:placeholder-gray-400 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors resize-vertical"
                rows="3"
                placeholder={config.placeholder || `Enter ${config.label.toLowerCase()}`}
              />
            ) : (
              <div className="relative">
                <input
                  type={config.type}
                  value={value || ''}
                  onChange={(e) => {
                    const newValue = config.type === 'number' ?
                      (e.target.value === '' ? '' : Number(e.target.value)) :
                      e.target.value;
                    handleFieldChange(field, newValue);
                  }}
                  onBlur={() => {
                    const validationError = validateField(field, value);
                    if (validationError) {
                      setErrors(prev => ({ ...prev, [field]: validationError }));
                    }
                  }}
                  className="admin-input text-sm bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-admin-900 dark:text-white placeholder-admin-500 dark:placeholder-gray-400 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors w-full"
                  placeholder={config.placeholder || `Enter ${config.label.toLowerCase()}`}
                  min={config.min}
                  max={config.max}
                />
                {field === 'sendgrid_api_key' && sendgridValidation.isValidating && (
                  <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                    <ArrowPathIcon className="w-4 h-4 animate-spin text-blue-500" />
                  </div>
                )}
              </div>
            )}
            
            {error && (
              <p className="mt-1 text-xs text-red-600 dark:text-red-400 flex items-center gap-1">
                <ExclamationCircleIcon className="w-3 h-3" />
                {error}
              </p>
            )}
            
            {field === 'sendgrid_api_key' && sendgridValidation.error && (
              <p className="mt-1 text-xs text-red-600 dark:text-red-400 flex items-center gap-1">
                <ExclamationCircleIcon className="w-3 h-3" />
                {sendgridValidation.error}
              </p>
            )}
          </div>
          
          {(config.default !== undefined || originalSettings[field] !== undefined) && value !== (config.default || originalSettings[field]) && config.type !== 'display' && (
            <button
              onClick={() => handleResetField(field)}
              className="ml-4 p-1 text-admin-400 dark:text-gray-500 hover:text-admin-600 dark:hover:text-gray-300 transition-colors"
              title="Reset to default"
            >
              <ArrowPathIcon className="w-4 h-4" />
            </button>
          )}
        </div>
      </div>
    );
  };

  // Render Admin Invitations section
  const renderAdminInvitations = () => (
    <div className="space-y-6">
      {/* Send Invitation Form */}
      <div className="bg-white dark:bg-gray-800 border border-admin-200 dark:border-gray-700 rounded-lg shadow-admin p-6">
        <h3 className="text-lg font-medium text-admin-900 dark:text-white mb-4">Send Admin Invitation</h3>
        <form onSubmit={handleSendInvitation} className="space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              value={inviteForm.email}
              onChange={(e) => setInviteForm({ ...inviteForm, email: e.target.value })}
              className="admin-input bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-admin-900 dark:text-white placeholder-admin-500 dark:placeholder-gray-400 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
              placeholder="Enter email address"
              required
            />
          </div>
          <div>
            <label htmlFor="message" className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
              Message (Optional)
            </label>
            <textarea
              id="message"
              value={inviteForm.message}
              onChange={(e) => setInviteForm({ ...inviteForm, message: e.target.value })}
              className="admin-input bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 text-admin-900 dark:text-white placeholder-admin-500 dark:placeholder-gray-400 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors resize-vertical"
              rows="3"
              placeholder="Add a personal message to the invitation"
            />
          </div>
          <button
            type="submit"
            disabled={invitationsLoading}
            className="px-4 py-2 bg-admin-600 dark:bg-primary-600 text-white rounded-md hover:bg-admin-700 dark:hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-admin-500 dark:focus:ring-primary-500 focus:ring-offset-2 transition-colors duration-200"
          >
            {invitationsLoading ? 'Sending...' : 'Send Invitation'}
          </button>
        </form>
      </div>

      {/* Alerts */}
      {invitationError && (
        <div className="bg-red-50 dark:bg-red-900/50 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded">
          {invitationError}
        </div>
      )}
      {invitationSuccess && (
        <div className="bg-green-50 dark:bg-green-900/50 border border-green-200 dark:border-green-700 text-green-700 dark:text-green-300 px-4 py-3 rounded">
          {invitationSuccess}
        </div>
      )}

      {/* Invitations List */}
      <div className="bg-white dark:bg-gray-800 border border-admin-200 dark:border-gray-700 rounded-lg shadow-admin p-6">
        <h3 className="text-lg font-medium text-admin-900 dark:text-white mb-4">Pending Invitations</h3>
        
        {invitationsLoading && invitations.length === 0 ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
            <p className="mt-2 text-sm text-admin-500 dark:text-gray-400">Loading invitations...</p>
          </div>
        ) : invitations.length === 0 ? (
          <div className="text-center py-8">
            <UserPlusIcon className="mx-auto h-12 w-12 text-admin-400 dark:text-gray-500" />
            <h3 className="mt-2 text-sm font-medium text-admin-900 dark:text-white">No invitations</h3>
            <p className="mt-1 text-sm text-admin-500 dark:text-gray-400">
              No admin invitations have been sent yet.
            </p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-admin-300 dark:divide-gray-600">
              <thead className="bg-admin-50 dark:bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-admin-500 dark:text-gray-300 uppercase tracking-wider">
                    Email
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-admin-500 dark:text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-admin-500 dark:text-gray-300 uppercase tracking-wider">
                    Invited By
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-admin-500 dark:text-gray-300 uppercase tracking-wider">
                    Date
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-admin-500 dark:text-gray-300 uppercase tracking-wider">
                    Expires
                  </th>
                  <th className="relative px-6 py-3">
                    <span className="sr-only">Actions</span>
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-800 divide-y divide-admin-200 dark:divide-gray-600">
                {invitations.map((invitation) => (
                  <tr key={invitation._id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-admin-900 dark:text-white">
                      {invitation.email}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusBadgeColor(invitation.status)}`}>
                        {invitation.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-admin-500 dark:text-gray-400">
                      {invitation.invitedBy?.name || invitation.invitedBy?.email || 'Unknown'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-admin-500 dark:text-gray-400">
                      {formatDate(invitation.createdAt)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-admin-500 dark:text-gray-400">
                      {formatDate(invitation.expiresAt)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      {invitation.status === 'pending' && (
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleResendInvitation(invitation._id)}
                            className="text-primary-600 dark:text-primary-400 hover:text-primary-900 dark:hover:text-primary-300"
                            disabled={invitationsLoading}
                          >
                            Resend
                          </button>
                          <button
                            onClick={() => handleCancelInvitation(invitation._id)}
                            className="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
                            disabled={invitationsLoading}
                          >
                            Cancel
                          </button>
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );

  // Handle responsive behavior
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 1024);
    };
  // Monitor modifiedFields changes for debugging
  useEffect(() => {
    console.log("modifiedFields updated:", Array.from(modifiedFields), "Size:", modifiedFields.size);
  }, [modifiedFields]);    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Load initial data
  useEffect(() => {
    fetchSettings();
    if (activeCategory === 'admin') {
      fetchInvitations();
    }
  }, [fetchSettings, activeCategory]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p className="mt-4 text-sm text-admin-500">Loading settings...</p>
        </div>
      </div>
    );
  }

  const filteredSettings = getFilteredSettings();
  const isSearching = searchQuery && filteredSettings;

  return (
    <div className="min-h-screen bg-admin-50 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b border-admin-200 dark:border-gray-700 sticky top-0 z-10">
        <div className="px-4 sm:px-6 lg:px-8">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between py-4 gap-4">
            <div className="flex items-center">
              <h1 className="text-xl font-semibold text-admin-900 dark:text-white">Settings</h1>
            </div>
            
            {/* Header Actions */}
            <div className="flex flex-col sm:flex-row items-center gap-3 w-full sm:w-auto">
              {/* Search Bar */}
              <div className="relative w-full sm:w-64">
                <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-admin-400 dark:text-gray-500" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Search settings..."
                  className="w-full pl-9 pr-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-admin-900 dark:text-white placeholder-admin-500 dark:placeholder-gray-400 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors"
                />
                {searchQuery && (
                  <button
              console.log("Save button state - saving:", saving, "modifiedFields.size:", modifiedFields.size, "disabled:", saving || modifiedFields.size === 0);                    onClick={() => setSearchQuery('')}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-admin-400 dark:text-gray-500 hover:text-admin-600 dark:hover:text-gray-300"
                  >
                    <XMarkIcon className="w-4 h-4" />
                  </button>
                )}
              </div>
              
              {/* Save Button */}
              {activeCategory !== 'admin' && (
                <button
                  onClick={handleSave}
                  disabled={saving || modifiedFields.size === 0}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-all whitespace-nowrap ${
                    modifiedFields.size > 0
                      ? 'bg-primary-600 text-white hover:bg-primary-700'
                      : 'bg-admin-100 dark:bg-gray-700 text-admin-400 dark:text-gray-500 cursor-not-allowed'
                  }`}
                >
                  {saving ? (
                    <>
                      <ArrowPathIcon className="w-4 h-4 animate-spin" />
                      Saving...
                    </>
                  ) : saveSuccess ? (
                    <>
                      <CheckIcon className="w-4 h-4" />
                      Saved
                    </>
                  ) : (
                    <>
                      <CheckCircleIcon className="w-4 h-4" />
                      Save Changes {modifiedFields.size > 0 && `(${modifiedFields.size})`}
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="px-4 sm:px-6 lg:px-8 py-6">
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Mobile Sidebar Toggle */}
          {isMobile && !isSearching && (
            <button
              onClick={() => setMobileSidebarOpen(!mobileSidebarOpen)}
              className="lg:hidden flex items-center justify-between w-full p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-admin-200 dark:border-gray-700"
            >
              <div className="flex items-center gap-2">
                {React.createElement(categories[activeCategory].icon, {
                  className: `w-5 h-5 text-${categories[activeCategory].color}-600`
                })}
                <span className="font-medium text-admin-900 dark:text-white">
                  {categories[activeCategory].name}
                </span>
              </div>
              {mobileSidebarOpen ? (
                <ChevronDownIcon className="w-5 h-5 text-admin-400 dark:text-gray-500" />
              ) : (
                <ChevronRightIcon className="w-5 h-5 text-admin-400 dark:text-gray-500" />
              )}
            </button>
          )}

          {/* Sidebar - Categories */}
          {!isSearching && (
            <div className={`w-full lg:w-64 flex-shrink-0 ${isMobile && !mobileSidebarOpen ? 'hidden' : ''}`}>
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-admin-200 dark:border-gray-700 overflow-hidden">
                <div className="p-4 border-b border-admin-200 dark:border-gray-700">
                  <h2 className="text-sm font-semibold text-admin-900 dark:text-white">Categories</h2>
                </div>
                <nav className="p-2">
                  {Object.entries(categories).map(([key, category]) => {
                    const Icon = category.icon;
                    const isActive = activeCategory === key;
                    return (
                      <button
                        key={key}
                        onClick={() => {
                          setActiveCategory(key);
                          if (isMobile) setMobileSidebarOpen(false);
                        }}
                        className={`w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-colors mb-1 ${
                          isActive
                            ? 'bg-primary-50 dark:bg-primary-900/50 text-primary-700 dark:text-primary-300 border border-primary-200 dark:border-primary-700'
                            : 'text-admin-600 dark:text-gray-300 hover:bg-admin-50 dark:hover:bg-gray-700'
                        }`}
                      >
                        <Icon className={`w-5 h-5 flex-shrink-0 ${isActive ? 'text-primary-600 dark:text-primary-400' : 'text-admin-400 dark:text-gray-500'}`} />
                        <div className="text-left flex-1">
                          <div className="font-medium">{category.name}</div>
                          {isActive && (
                            <div className="text-xs font-normal mt-0.5 text-admin-500 dark:text-gray-400">
                              {category.description}
                            </div>
                          )}
                        </div>
                      </button>
                    );
                  })}
                </nav>
              </div>

              {/* Quick Stats - Desktop only */}
              {!isMobile && activeCategory !== 'admin' && (
                <div className="mt-4 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-admin-200 dark:border-gray-700 p-4">
                  <h3 className="text-sm font-semibold text-admin-900 dark:text-white mb-3">Quick Stats</h3>
                  <div className="space-y-2 text-xs">
                    <div className="flex justify-between">
                      <span className="text-admin-500 dark:text-gray-400">Total Settings</span>
                      <span className="font-medium text-admin-900 dark:text-white">{Object.keys(fieldConfigs).length}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-admin-500 dark:text-gray-400">Modified</span>
                      <span className="font-medium text-yellow-600 dark:text-yellow-400">{modifiedFields.size}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-admin-500 dark:text-gray-400">Errors</span>
                      <span className="font-medium text-red-600 dark:text-red-400">{Object.keys(errors).length}</span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Main Content */}
          <div className="flex-1">
            {isSearching ? (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-admin-200 dark:border-gray-700 p-6">
                <div className="mb-4">
                  <h2 className="text-lg font-semibold text-admin-900 dark:text-white">
                    Search Results
                  </h2>
                  <p className="text-sm text-admin-500 dark:text-gray-400 mt-1">
                    Found {Object.keys(filteredSettings).length} settings matching "{searchQuery}"
                  </p>
                </div>
                <div className="space-y-4">
                  {Object.entries(filteredSettings).map(([field, config]) => 
                    renderField(field, config)
                  )}
                </div>
              </div>
            ) : activeCategory === 'admin' ? (
              renderAdminInvitations()
            ) : (
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-admin-200 dark:border-gray-700">
                <div className="p-6 border-b border-admin-200 dark:border-gray-700">
                  <div className="flex items-center gap-3">
                    {React.createElement(categories[activeCategory].icon, {
                      className: `w-6 h-6 text-${categories[activeCategory].color}-600`
                    })}
                    <div>
                      <h2 className="text-lg font-semibold text-admin-900 dark:text-white">
                        {categories[activeCategory].name}
                      </h2>
                      <p className="text-sm text-admin-500 dark:text-gray-400 mt-0.5">
                        {categories[activeCategory].description}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="p-6">
                  <div className="space-y-4">
                    {getCategorySettings.map(field => {
                      const config = fieldConfigs[field];
                      return config ? renderField(field, config) : null;
                    })}
                  </div>
                  
                  {getCategorySettings.length === 0 && (
                    <div className="text-center py-12">
                      <div className="mx-auto h-12 w-12 flex items-center justify-center rounded-full bg-admin-100 dark:bg-gray-700">
                        <CogIcon className="h-6 w-6 text-admin-600 dark:text-gray-400" />
                      </div>
                      <h3 className="mt-2 text-sm font-medium text-admin-900 dark:text-white">No settings available</h3>
                      <p className="mt-1 text-sm text-admin-500 dark:text-gray-400">
                        This category doesn't have any settings configured yet.
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Success Toast */}
      {saveSuccess && (
        <div className="fixed bottom-4 right-4 bg-green-600 dark:bg-green-700 text-white px-6 py-4 rounded-lg shadow-xl flex items-center gap-3 animate-slide-up z-50 max-w-md">
          <div className="flex-shrink-0">
            <CheckCircleIcon className="w-6 h-6" />
          </div>
          <div className="flex-1">
            <p className="font-semibold">Settings saved successfully!</p>
            <p className="text-sm text-green-100 mt-1">Your changes have been applied and will take effect immediately.</p>
          </div>
        </div>
      )}

      {/* Error Toast */}
      {errors.general && (
        <div className="fixed bottom-4 right-4 bg-red-600 dark:bg-red-700 text-white px-6 py-4 rounded-lg shadow-xl flex items-center gap-3 animate-slide-up z-50 max-w-md">
          <div className="flex-shrink-0">
            <ExclamationCircleIcon className="w-6 h-6" />
          </div>
          <div className="flex-1">
            <p className="font-semibold">Error saving settings</p>
            <p className="text-sm text-red-100 mt-1">{errors.general}</p>
          </div>
          <button
            onClick={() => setErrors({})}
            className="flex-shrink-0 ml-2 text-red-200 hover:text-white transition-colors"
          >
            <XMarkIcon className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  );
};

export default Settings;