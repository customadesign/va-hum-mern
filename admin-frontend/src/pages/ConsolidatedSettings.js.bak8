import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import {
  CogIcon,
  EnvelopeIcon,
  ShieldCheckIcon,
  SparklesIcon,
  AdjustmentsHorizontalIcon,
  MagnifyingGlassIcon,
  CheckCircleIcon,
  ExclamationCircleIcon,
  ArrowPathIcon,
  UserGroupIcon,
  ChevronRightIcon,
  PlusIcon,
  XMarkIcon
} from '@heroicons/react/24/outline';
import { CheckIcon } from '@heroicons/react/24/solid';

const ConsolidatedSettings = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [settings, setSettings] = useState({});
  const [originalSettings, setOriginalSettings] = useState({});
  const [activeCategory, setActiveCategory] = useState('general');
  const [searchQuery, setSearchQuery] = useState('');
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [errors, setErrors] = useState({});
  const [modifiedFields, setModifiedFields] = useState(new Set());
  
  // Admin invitations state
  const [invitations, setInvitations] = useState([]);
  const [inviteForm, setInviteForm] = useState({ email: '', message: '' });
  const [inviteError, setInviteError] = useState('');
  const [inviteSuccess, setInviteSuccess] = useState('');
  
  // SendGrid-specific state
  const [sendgridValidation, setSendgridValidation] = useState({
    isValidating: false,
    connectionStatus: 'not_tested',
    domainAuthentication: 'unknown',
    senderIdentityStatus: 'unknown',
    lastValidated: null,
    senderValidation: {
      business: { verified: false, testing: false },
      va: { verified: false, testing: false },
      admin: { verified: false, testing: false }
    }
  });
  
  // Email type preview state
  const [emailPreview, setEmailPreview] = useState({
    activePreview: null,
    previewResults: {}
  });

  // Categories with admin management included
  const categories = {
    general: {
      name: 'General Settings',
      icon: CogIcon,
      description: 'Basic site configuration and information',
      color: 'blue'
    },
    admin: {
      name: 'Admin Management',
      icon: UserGroupIcon,
      description: 'Manage admin invitations and access',
      color: 'indigo'
    },
    email: {
      name: 'Email & Notifications',
      icon: EnvelopeIcon,
      description: 'SMTP and email delivery settings',
      color: 'green'
    },
    security: {
      name: 'Security & Authentication',
      icon: ShieldCheckIcon,
      description: 'Authentication and security policies',
      color: 'red'
    },
    features: {
      name: 'Features & Permissions',
      icon: SparklesIcon,
      description: 'Enable or disable platform features',
      color: 'purple'
    },
    limits: {
      name: 'System Limits',
      icon: AdjustmentsHorizontalIcon,
      description: 'Configure system constraints and limits',
      color: 'yellow'
    }
  };


  // Fetch all settings and invitations
  const fetchSettings = useCallback(async () => {
    try {
      setLoading(true);
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      // Fetch system settings
      const settingsResponse = await fetch(`${API_URL}/admin/configs`, {
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (settingsResponse.ok) {
        const data = await settingsResponse.json();
        
        // Parse the categorized config structure from backend
        const flatSettings = {};
        if (data.data && data.data.configs) {
          Object.keys(data.data.configs).forEach(category => {
            Object.keys(data.data.configs[category]).forEach(key => {
              flatSettings[key] = data.data.configs[category][key].value;
            });
          });
        }
        
        setSettings(flatSettings);
        setOriginalSettings(flatSettings);
        console.log('Settings loaded:', flatSettings);
      } else {
        console.error('Failed to fetch settings:', settingsResponse.status);
      }

      // Fetch admin invitations
      const invitationsResponse = await fetch(`${API_URL}/admin/invitations`, {
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (invitationsResponse.ok) {
        const data = await invitationsResponse.json();
        setInvitations(data.invitations || data.data || []);
      }
    } catch (err) {
      console.error('Error fetching settings:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  // Send admin invitation
  const handleSendInvitation = async (e) => {
    e.preventDefault();
    if (!inviteForm.email.trim()) {
      setInviteError('Email is required');
      return;
    }

    try {
      setLoading(true);
      setInviteError('');
      setInviteSuccess('');

      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations`, {
        method: 'POST',
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(inviteForm)
      });

      const data = await response.json();

      if (response.ok) {
        setInviteSuccess('Invitation sent successfully!');
        setInviteForm({ email: '', message: '' });
        fetchSettings(); // Refresh to get updated invitations
      } else {
        setInviteError(data.message || 'Failed to send invitation');
      }
    } catch (err) {
      setInviteError('Failed to send invitation');
    } finally {
      setLoading(false);
    }
  };

  // Cancel invitation
  const handleCancelInvitation = async (invitationId) => {
    if (!window.confirm('Are you sure you want to cancel this invitation?')) {
      return;
    }

    try {
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/invitations/${invitationId}`, {
        method: 'DELETE',
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include'
      });

      if (response.ok) {
        setInviteSuccess('Invitation cancelled successfully');
        fetchSettings();
      }
    } catch (err) {
      setInviteError('Failed to cancel invitation');
    }
  };

  // Validate individual field
  const validateField = (key, value, options = {}) => {
    if (options.min !== undefined && value < options.min) {
      return `Minimum value is ${options.min}`;
    }
    if (options.max !== undefined && value > options.max) {
      return `Maximum value is ${options.max}`;
    }
    if (typeof value === 'number' && (isNaN(value) || value < 0)) {
      return 'Please enter a valid positive number';
    }
    return null;
  };

  // Save system settings with proper validation
  const handleSaveSettings = async () => {
    try {
      setSaving(true);
      setErrors({});
      
      // Validate all fields before saving
      const validationErrors = {};
      const fieldValidations = {
        max_file_size: { min: 1, max: 100 },
        max_vas_per_page: { min: 10, max: 100 },
        rate_limit_max_requests: { min: 10, max: 1000 },
        max_message_length: { min: 100, max: 10000 },
        password_min_length: { min: 6, max: 32 },
        session_timeout: { min: 5, max: 1440 }
      };

      Object.keys(settings).forEach(key => {
        if (fieldValidations[key] && settings[key] !== '') {
          const error = validateField(key, Number(settings[key]), fieldValidations[key]);
          if (error) {
            validationErrors[key] = error;
          }
        }
      });

      if (Object.keys(validationErrors).length > 0) {
        setErrors(validationErrors);
        setSaving(false);
        return;
      }
      
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      // Format the data correctly for the backend (use 'configs' instead of 'settings')
      const response = await fetch(`${API_URL}/admin/configs`, {
        method: 'PUT',
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ configs: settings })
      });

      if (response.ok) {
        const data = await response.json();
        // Update with the properly formatted response
        const updatedSettings = {};
        if (data.data && data.data.configs) {
          Object.keys(data.data.configs).forEach(category => {
            Object.keys(data.data.configs[category]).forEach(key => {
              updatedSettings[key] = data.data.configs[category][key].value;
            });
          });
        }
        
        setSettings(updatedSettings);
        setOriginalSettings(updatedSettings);
        setModifiedFields(new Set());
        setSaveSuccess(true);
        setTimeout(() => setSaveSuccess(false), 3000);
        
        console.log('Settings saved successfully:', updatedSettings);
      } else {
        const errorData = await response.json();
        setErrors(errorData.errors || {});
        console.error('Save failed:', errorData);
      }
    } catch (err) {
      console.error('Error saving settings:', err);
      setErrors({ general: 'Network error while saving settings' });
    } finally {
      setSaving(false);
    }
  };

  // SendGrid validation function with multiple sender support
  const validateSendGridCredentials = async (apiKey) => {
    try {
      setSendgridValidation(prev => ({ ...prev, isValidating: true }));
      
      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/configs/validate-sendgrid`, {
        method: 'POST',
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({ apiKey })
      });

      const data = await response.json();
      
      if (response.ok) {
        // Validate specific sender addresses
        const requiredSenders = [
          'hello@esystemsmanagement.com',
          'hello@linkagevahub.com',
          'noreply@linkagevahub.com'
        ];
        
        const senderValidation = {
          business: { verified: false, testing: false },
          va: { verified: false, testing: false },
          admin: { verified: false, testing: false }
        };
        
        if (data.senderIdentities) {
          const verifiedEmails = data.senderIdentities.map(s => s.email);
          senderValidation.business.verified = verifiedEmails.includes('hello@esystemsmanagement.com');
          senderValidation.va.verified = verifiedEmails.includes('hello@linkagevahub.com');
          senderValidation.admin.verified = verifiedEmails.includes('noreply@linkagevahub.com');
        }
        
        setSendgridValidation(prev => ({
          ...prev,
          isValidating: false,
          connectionStatus: 'connected',
          domainAuthentication: data.domainAuthenticated ? 'verified' : 'not_verified',
          senderIdentityStatus: data.senderIdentities?.length > 0 ? 'verified' : 'not_verified',
          lastValidated: new Date(),
          validationData: data,
          senderValidation
        }));
        
        // Set default sender addresses
        setSettings(prev => ({
          ...prev,
          sendgrid_business_sender: 'hello@esystemsmanagement.com',
          sendgrid_va_sender: 'hello@linkagevahub.com',
          sendgrid_admin_sender: 'noreply@linkagevahub.com'
        }));
      } else {
        setSendgridValidation(prev => ({
          ...prev,
          isValidating: false,
          connectionStatus: 'error',
          domainAuthentication: 'unknown',
          senderIdentityStatus: 'unknown',
          lastValidated: new Date(),
          error: data.error || 'Failed to validate SendGrid credentials',
          senderValidation: {
            business: { verified: false, testing: false },
            va: { verified: false, testing: false },
            admin: { verified: false, testing: false }
          }
        }));
      }
    } catch (error) {
      console.error('SendGrid validation error:', error);
      setSendgridValidation(prev => ({
        ...prev,
        isValidating: false,
        connectionStatus: 'error',
        domainAuthentication: 'unknown',
        senderIdentityStatus: 'unknown',
        lastValidated: new Date(),
        error: 'Network error during validation',
        senderValidation: {
          business: { verified: false, testing: false },
          va: { verified: false, testing: false },
          admin: { verified: false, testing: false }
        }
      }));
    }
  };

  // Test individual sender address
  const testSenderAddress = async (email, type) => {
    try {
      setSendgridValidation(prev => ({
        ...prev,
        senderValidation: {
          ...prev.senderValidation,
          [type]: { ...prev.senderValidation[type], testing: true }
        }
      }));

      const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';
      
      const response = await fetch(`${API_URL}/admin/configs/test-sender`, {
        method: 'POST',
        headers: {

          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          apiKey: settings.sendgrid_api_key,
          senderEmail: email
        })
      });

      const data = await response.json();
      
      setSendgridValidation(prev => ({
        ...prev,
        senderValidation: {
          ...prev.senderValidation,
          [type]: {
            verified: response.ok && data.verified,
            testing: false,
            lastTested: new Date(),
            error: response.ok ? null : data.error
          }
        }
      }));
    } catch (error) {
      setSendgridValidation(prev => ({
        ...prev,
        senderValidation: {
          ...prev.senderValidation,
          [type]: {
            verified: false,
            testing: false,
            lastTested: new Date(),
            error: 'Network error during test'
          }
        }
      }));
    }
  };

  // Generate email preview for different contexts
  const generateEmailPreview = (emailType) => {
    const previews = {
      business: {
        from: settings.sendgrid_business_sender || 'hello@esystemsmanagement.com',
        subject: 'Invoice for VA Services',
        context: 'Business-related emails (invoices, proposals, client communications)',
        example: 'Invoice #INV-2024-001 for Virtual Assistant services'
      },
      va: {
        from: settings.sendgrid_va_sender || 'hello@linkagevahub.com',
        subject: 'New Task Assignment',
        context: 'Virtual Assistant communications (task assignments, VA notifications)',
        example: 'You have been assigned a new project by TechCorp Inc.'
      },
      admin: {
        from: settings.sendgrid_admin_sender || 'noreply@linkagevahub.com',
        subject: 'Password Reset Request',
        context: 'Administrative system emails (password resets, system notifications)',
        example: 'Click here to reset your password - expires in 24 hours'
      }
    };
    
    setEmailPreview(prev => ({
      ...prev,
      activePreview: emailType,
      previewResults: { ...prev.previewResults, [emailType]: previews[emailType] }
    }));
  };

  // Handle field change
  const handleFieldChange = (field, value) => {
    setSettings(prev => ({
      ...prev,
      [field]: value
    }));
    
    if (value !== originalSettings[field]) {
      setModifiedFields(prev => new Set(prev).add(field));
    } else {
      setModifiedFields(prev => {
        const newSet = new Set(prev);
        newSet.delete(field);
        return newSet;
      });
    }
    
    // Handle SendGrid API key validation
    if (field === 'sendgrid_api_key' && value && value.startsWith('SG.') && value.length > 20) {
      // Debounce the validation to avoid too many API calls
      const timeoutId = setTimeout(() => {
        validateSendGridCredentials(value);
      }, 1000);
      
      // Clear previous timeout
      if (window.sendgridValidationTimeout) {
        clearTimeout(window.sendgridValidationTimeout);
      }
      window.sendgridValidationTimeout = timeoutId;
    } else if (field === 'sendgrid_api_key') {
      // Reset validation status if API key is invalid format
      setSendgridValidation(prev => ({
        ...prev,
        connectionStatus: 'not_tested',
        domainAuthentication: 'unknown',
        senderIdentityStatus: 'unknown',
        error: null
      }));
    }
  };

  // Render settings fields with enhanced validation
  const renderSettingsField = (key, label, type = 'text', options = {}) => {
    const value = settings[key] || '';
    const isModified = modifiedFields.has(key);
    const error = errors[key];
    
    // Real-time validation for numeric fields
    const handleNumericChange = (e) => {
      const newValue = e.target.value === '' ? '' : Number(e.target.value);
      handleFieldChange(key, newValue);
      
      // Real-time validation
      if (newValue !== '' && !isNaN(newValue)) {
        const validationError = validateField(key, newValue, options);
        if (validationError) {
          setErrors(prev => ({ ...prev, [key]: validationError }));
        } else {
          setErrors(prev => {
            const newErrors = { ...prev };
            delete newErrors[key];
            return newErrors;
          });
        }
      }
    };
    
    return (
      <div key={key} className={`mb-4 p-3 rounded-lg border ${error ? 'border-red-300 bg-red-50 dark:bg-red-900/20' : 'border-gray-200 dark:border-gray-600'} transition-colors`}>
        <label className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
          {label}
          {isModified && (
            <span className="ml-2 text-xs px-2 py-0.5 bg-yellow-100 text-yellow-700 rounded-full">(Modified)</span>
          )}
          {error && (
            <span className="ml-2 text-xs px-2 py-0.5 bg-red-100 text-red-700 rounded-full">Error</span>
          )}
        </label>
        
        {type === 'toggle' ? (
          <button
            onClick={() => handleFieldChange(key, !value)}
            className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
              value ? 'bg-blue-600 hover:bg-blue-700' : 'bg-red-500 hover:bg-red-600'
            }`}
          >
            <span
              className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                value ? 'translate-x-6' : 'translate-x-1'
              }`}
            />
          </button>
        ) : type === 'select' ? (
          <select
            value={value}
            onChange={(e) => handleFieldChange(key, e.target.value)}
            className={`admin-input ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
          >
            {options.choices?.map(choice => (
              <option key={choice.value} value={choice.value}>
                {choice.label}
              </option>
            ))}
          </select>
        ) : type === 'number' ? (
          <div className="relative">
            <input
              type="number"
              value={value}
              onChange={handleNumericChange}
              onBlur={(e) => {
                const numValue = Number(e.target.value);
                if (!isNaN(numValue)) {
                  const validationError = validateField(key, numValue, options);
                  if (validationError) {
                    setErrors(prev => ({ ...prev, [key]: validationError }));
                  }
                }
              }}
              className={`admin-input ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
              min={options.min}
              max={options.max}
              step="1"
            />
            {options.min !== undefined && options.max !== undefined && (
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-xs text-gray-400">
                {options.min}-{options.max}
              </div>
            )}
          </div>
        ) : (
          <input
            type={type}
            value={value}
            onChange={(e) => handleFieldChange(key, e.target.value)}
            className={`admin-input ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}
            placeholder={options.placeholder}
          />
        )}
        
        {options.help && (
          <p className="mt-1 text-xs text-admin-500 dark:text-gray-400">
            {options.help}
            {type === 'number' && options.min !== undefined && options.max !== undefined && (
              <span className="ml-2 font-medium">Range: {options.min} - {options.max}</span>
            )}
          </p>
        )}
        
        {error && (
          <p className="mt-1 text-xs text-red-600 dark:text-red-400 flex items-center gap-1">
            <ExclamationCircleIcon className="w-3 h-3" />
            {error}
          </p>
        )}
        
        {type === 'number' && value && !error && (
          <p className="mt-1 text-xs text-green-600 dark:text-green-400 flex items-center gap-1">
            <CheckCircleIcon className="w-3 h-3" />
            Valid value
          </p>
        )}
      </div>
    );
  };

  // Format date helper
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  useEffect(() => {
    fetchSettings();
  }, [fetchSettings]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
          <p className="mt-4 text-sm text-admin-500">Loading settings...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">Settings</h1>
        <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
          Configure platform settings and manage administrators
        </p>
      </div>

      <div className="flex gap-6">
        {/* Sidebar */}
        <div className="w-64 flex-shrink-0">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
            <nav className="p-2">
              {Object.entries(categories).map(([key, category]) => {
                const Icon = category.icon;
                const isActive = activeCategory === key;
                return (
                  <button
                    key={key}
                    onClick={() => setActiveCategory(key)}
                    className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors mb-1 ${
                      isActive
                        ? 'bg-[#1e3a8a] text-white'
                        : 'text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
                    }`}
                  >
                    <Icon className={`w-5 h-5 ${isActive ? 'text-white' : 'text-gray-400 dark:text-gray-500'}`} />
                    <div className="text-left">
                      <div>{category.name}</div>
                    </div>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Save Button */}
          {modifiedFields.size > 0 && activeCategory !== 'admin' && (
            <button
              onClick={() => {
                console.log("Save button clicked!");
                console.log("Modified fields:", modifiedFields.size);
                console.log("Active category:", activeCategory);
                handleSaveSettings();
              }}
              disabled={saving}
              className="w-full mt-4 admin-button-primary"
            >
              {saving ? (
                <>
                  <ArrowPathIcon className="w-4 h-4 animate-spin inline mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <CheckIcon className="w-4 h-4 inline mr-2" />
                  Save Changes ({modifiedFields.size})
                </>
              )}
            </button>
          )}
        </div>

        {/* Main Content */}
        <div className="flex-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            {/* General Settings */}
            {activeCategory === 'general' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">General Settings</h2>
                {renderSettingsField('site_name', 'Site Name', 'text', { 
                  help: 'The name of your platform' 
                })}
                {renderSettingsField('site_url', 'Site URL', 'url', { 
                  help: 'The main URL of your platform' 
                })}
                {renderSettingsField('admin_email', 'Admin Email', 'email', { 
                  help: 'Primary administrator email' 
                })}
                {renderSettingsField('support_email', 'Support Email', 'email', { 
                  help: 'Email for user support' 
                })}
                {renderSettingsField('maintenance_mode', 'Maintenance Mode', 'toggle', { 
                  help: 'Enable to prevent user access during updates' 
                })}
              </div>
            )}

            {/* Admin Management */}
            {activeCategory === 'admin' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Admin Management</h2>
                
                {/* Send Invitation Form */}
                <div className="mb-6 p-4 bg-admin-50 rounded-lg">
                  <h3 className="text-sm font-medium text-admin-900 dark:text-white mb-3">Send Admin Invitation</h3>
                  <form onSubmit={handleSendInvitation} className="space-y-3">
                    <input
                      type="email"
                      value={inviteForm.email}
                      onChange={(e) => setInviteForm({ ...inviteForm, email: e.target.value })}
                      className="admin-input"
                      placeholder="Email address"
                      required
                    />
                    <textarea
                      value={inviteForm.message}
                      onChange={(e) => setInviteForm({ ...inviteForm, message: e.target.value })}
                      className="admin-input"
                      rows="2"
                      placeholder="Optional message"
                    />
                    <button type="submit" className="admin-button-primary">
                      <PlusIcon className="w-4 h-4 inline mr-1" />
                      Send Invitation
                    </button>
                  </form>
                  
                  {inviteError && (
                    <p className="mt-2 text-sm text-red-600">{inviteError}</p>
                  )}
                  {inviteSuccess && (
                    <p className="mt-2 text-sm text-green-600">{inviteSuccess}</p>
                  )}
                </div>

                {/* Invitations List */}
                <div>
                  <h3 className="text-sm font-medium text-admin-900 dark:text-white mb-3">Pending Invitations</h3>
                  {invitations.length === 0 ? (
                    <p className="text-sm text-admin-500">No pending invitations</p>
                  ) : (
                    <div className="space-y-2">
                      {invitations.map((invitation) => (
                        <div key={invitation._id} className="p-3 border border-admin-200 rounded-lg flex justify-between items-center">
                          <div>
                            <p className="text-sm font-medium text-admin-900 dark:text-white">{invitation.email}</p>
                            <p className="text-xs text-admin-500">
                              Invited {formatDate(invitation.createdAt)}
                            </p>
                          </div>
                          <button
                            onClick={() => handleCancelInvitation(invitation._id)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <XMarkIcon className="w-4 h-4" />
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Email Settings - SendGrid Configuration */}
            {activeCategory === 'email' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Email & Notifications</h2>
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
                  <div className="flex items-center gap-2 mb-2">
                    <EnvelopeIcon className="w-5 h-5 text-blue-600" />
                    <h3 className="text-sm font-semibold text-blue-900 dark:text-blue-300">SendGrid Email Service</h3>
                  </div>
                  <p className="text-xs text-blue-700 dark:text-blue-400">
                    Configure your SendGrid integration for reliable email delivery with better authentication and deliverability.
                  </p>
                </div>
                
                {/* SendGrid API Key */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
                    SendGrid API Key *
                    {modifiedFields.has('sendgrid_api_key') && (
                      <span className="ml-2 text-xs text-yellow-600">(Modified)</span>
                    )}
                  </label>
                  <div className="relative">
                    <input
                      type="password"
                      value={settings.sendgrid_api_key || ''}
                      onChange={(e) => handleFieldChange('sendgrid_api_key', e.target.value)}
                      className="admin-input pr-10"
                      placeholder="SG.••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••"
                    />
                    {sendgridValidation.isValidating && (
                      <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                        <ArrowPathIcon className="w-4 h-4 animate-spin text-blue-500" />
                      </div>
                    )}
                  </div>
                  <p className="mt-1 text-xs text-admin-500">Your SendGrid API key (starts with "SG.")</p>
                  {sendgridValidation.error && (
                    <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
                      <ExclamationCircleIcon className="w-3 h-3" />
                      {sendgridValidation.error}
                    </p>
                  )}
                </div>

                {/* Connection Status */}
                {settings.sendgrid_api_key && (
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
                      Connection Status
                    </label>
                    <div className={`flex items-center gap-2 px-3 py-2 rounded-md ${
                      sendgridValidation.connectionStatus === 'connected'
                        ? 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20'
                        : sendgridValidation.connectionStatus === 'error'
                        ? 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20'
                        : 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20'
                    }`}>
                      {sendgridValidation.connectionStatus === 'connected' ? (
                        <CheckCircleIcon className="w-4 h-4" />
                      ) : sendgridValidation.connectionStatus === 'error' ? (
                        <ExclamationCircleIcon className="w-4 h-4" />
                      ) : (
                        <ArrowPathIcon className="w-4 h-4" />
                      )}
                      <span className="text-sm font-medium">
                        {sendgridValidation.connectionStatus === 'connected' ? 'Connected' :
                         sendgridValidation.connectionStatus === 'error' ? 'Connection failed' : 'Not tested'}
                      </span>
                      {sendgridValidation.lastValidated && (
                        <span className="text-xs opacity-75">
                          (Last checked: {sendgridValidation.lastValidated.toLocaleTimeString()})
                        </span>
                      )}
                    </div>
                    <p className="mt-1 text-xs text-admin-500">Real-time connection status to SendGrid API</p>
                  </div>
                )}

                {/* Domain Authentication Status */}
                {settings.sendgrid_api_key && sendgridValidation.connectionStatus === 'connected' && (
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-admin-700 dark:text-white mb-1">
                      Domain Authentication Status
                    </label>
                    <div className={`flex items-center gap-2 px-3 py-2 rounded-md ${
                      sendgridValidation.domainAuthentication === 'verified'
                        ? 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20'
                        : sendgridValidation.domainAuthentication === 'not_verified'
                        ? 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20'
                        : 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20'
                    }`}>
                      {sendgridValidation.domainAuthentication === 'verified' ? (
                        <CheckCircleIcon className="w-4 h-4" />
                      ) : sendgridValidation.domainAuthentication === 'not_verified' ? (
                        <ExclamationCircleIcon className="w-4 h-4" />
                      ) : (
                        <ArrowPathIcon className="w-4 h-4" />
                      )}
                      <span className="text-sm font-medium">
                        {sendgridValidation.domainAuthentication === 'verified' ? 'Domain verified' :
                         sendgridValidation.domainAuthentication === 'not_verified' ? 'Domain not verified' : 'Unknown'}
                      </span>
                    </div>
                    <p className="mt-1 text-xs text-admin-500">Shows whether your domain is authenticated with SendGrid</p>
                  </div>
                )}

                {/* Dynamic Sender Configuration */}
                {settings.sendgrid_api_key && sendgridValidation.connectionStatus === 'connected' && (
                  <div className="mb-6">
                    <h3 className="text-md font-semibold text-gray-900 dark:text-white mb-4">Dynamic Sender Configuration</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                      Configure different sender addresses for different types of emails to improve deliverability and user experience.
                    </p>
                    
                    {/* Business Communications */}
                    <div className="mb-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                          <h4 className="text-sm font-medium text-gray-900 dark:text-white">Business Communications</h4>
                          {sendgridValidation.senderValidation?.business?.verified ? (
                            <CheckCircleIcon className="w-4 h-4 text-green-500" />
                          ) : (
                            <ExclamationCircleIcon className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <button
                          onClick={() => testSenderAddress('hello@esystemsmanagement.com', 'business')}
                          disabled={sendgridValidation.senderValidation?.business?.testing}
                          className="text-xs px-2 py-1 bg-blue-100 text-blue-700 rounded hover:bg-blue-200 disabled:opacity-50"
                        >
                          {sendgridValidation.senderValidation?.business?.testing ? 'Testing...' : 'Test'}
                        </button>
                      </div>
                      <input
                        type="email"
                        value={settings.sendgrid_business_sender || 'hello@esystemsmanagement.com'}
                        onChange={(e) => handleFieldChange('sendgrid_business_sender', e.target.value)}
                        className="admin-input mb-2"
                        placeholder="hello@esystemsmanagement.com"
                      />
                      <p className="text-xs text-gray-500">Used for: Client communications, invoices, proposals, business inquiries</p>
                      <button
                        onClick={() => generateEmailPreview('business')}
                        className="mt-2 text-xs text-blue-600 hover:text-blue-800"
                      >
                        Preview Email Usage →
                      </button>
                    </div>

                    {/* VA Communications */}
                    <div className="mb-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                          <h4 className="text-sm font-medium text-gray-900 dark:text-white">VA Communications</h4>
                          {sendgridValidation.senderValidation?.va?.verified ? (
                            <CheckCircleIcon className="w-4 h-4 text-green-500" />
                          ) : (
                            <ExclamationCircleIcon className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <button
                          onClick={() => testSenderAddress('hello@linkagevahub.com', 'va')}
                          disabled={sendgridValidation.senderValidation?.va?.testing}
                          className="text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200 disabled:opacity-50"
                        >
                          {sendgridValidation.senderValidation?.va?.testing ? 'Testing...' : 'Test'}
                        </button>
                      </div>
                      <input
                        type="email"
                        value={settings.sendgrid_va_sender || 'hello@linkagevahub.com'}
                        onChange={(e) => handleFieldChange('sendgrid_va_sender', e.target.value)}
                        className="admin-input mb-2"
                        placeholder="hello@linkagevahub.com"
                      />
                      <p className="text-xs text-gray-500">Used for: Task assignments, VA notifications, VA-related updates</p>
                      <button
                        onClick={() => generateEmailPreview('va')}
                        className="mt-2 text-xs text-green-600 hover:text-green-800"
                      >
                        Preview Email Usage →
                      </button>
                    </div>

                    {/* Administrative Emails */}
                    <div className="mb-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                          <h4 className="text-sm font-medium text-gray-900 dark:text-white">Administrative Emails</h4>
                          {sendgridValidation.senderValidation?.admin?.verified ? (
                            <CheckCircleIcon className="w-4 h-4 text-green-500" />
                          ) : (
                            <ExclamationCircleIcon className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <button
                          onClick={() => testSenderAddress('noreply@linkagevahub.com', 'admin')}
                          disabled={sendgridValidation.senderValidation?.admin?.testing}
                          className="text-xs px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 disabled:opacity-50"
                        >
                          {sendgridValidation.senderValidation?.admin?.testing ? 'Testing...' : 'Test'}
                        </button>
                      </div>
                      <input
                        type="email"
                        value={settings.sendgrid_admin_sender || 'noreply@linkagevahub.com'}
                        onChange={(e) => handleFieldChange('sendgrid_admin_sender', e.target.value)}
                        className="admin-input mb-2"
                        placeholder="noreply@linkagevahub.com"
                      />
                      <p className="text-xs text-gray-500">Used for: Password resets, system notifications, automated alerts</p>
                      <button
                        onClick={() => generateEmailPreview('admin')}
                        className="mt-2 text-xs text-red-600 hover:text-red-800"
                      >
                        Preview Email Usage →
                      </button>
                    </div>

                    {/* Email Preview Modal */}
                    {emailPreview.activePreview && emailPreview.previewResults[emailPreview.activePreview] && (
                      <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="text-sm font-semibold text-gray-900 dark:text-white">Email Preview</h4>
                          <button
                            onClick={() => setEmailPreview(prev => ({ ...prev, activePreview: null }))}
                            className="text-gray-400 hover:text-gray-600"
                          >
                            <XMarkIcon className="w-4 h-4" />
                          </button>
                        </div>
                        <div className="space-y-2 text-sm">
                          <div className="flex">
                            <span className="w-16 text-gray-500">From:</span>
                            <span className="font-medium">{emailPreview.previewResults[emailPreview.activePreview].from}</span>
                          </div>
                          <div className="flex">
                            <span className="w-16 text-gray-500">Subject:</span>
                            <span>{emailPreview.previewResults[emailPreview.activePreview].subject}</span>
                          </div>
                          <div className="flex">
                            <span className="w-16 text-gray-500">Context:</span>
                            <span className="text-gray-600">{emailPreview.previewResults[emailPreview.activePreview].context}</span>
                          </div>
                          <div className="mt-3 p-2 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded text-xs">
                            <strong>Example:</strong> {emailPreview.previewResults[emailPreview.activePreview].example}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Fallback Configuration */}
                {settings.sendgrid_api_key && (
                  <div className="mb-4">
                    <h3 className="text-md font-semibold text-gray-900 dark:text-white mb-3">Fallback Settings</h3>
                    <div className="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                      <div className="flex items-center gap-2 mb-2">
                        <ExclamationCircleIcon className="w-4 h-4 text-yellow-600" />
                        <span className="text-sm font-medium text-yellow-800 dark:text-yellow-300">Fallback Sender</span>
                      </div>
                      <input
                        type="email"
                        value={settings.sendgrid_fallback_sender || 'hello@linkagevahub.com'}
                        onChange={(e) => handleFieldChange('sendgrid_fallback_sender', e.target.value)}
                        className="admin-input mb-2"
                        placeholder="hello@linkagevahub.com"
                      />
                      <p className="text-xs text-yellow-700 dark:text-yellow-400">
                        This email will be used if the primary sender for an email type is not verified or fails validation.
                      </p>
                    </div>
                  </div>
                )}

                {/* From Name */}
                {renderSettingsField('email_from_name', 'From Name', 'text', {
                  help: 'Default sender name for emails'
                })}
              </div>
            )}

            {/* Security Settings */}
            {activeCategory === 'security' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Security & Authentication</h2>
                {renderSettingsField('password_min_length', 'Minimum Password Length', 'number', { 
                  help: 'Minimum characters for passwords', min: 6, max: 32 
                })}
                {renderSettingsField('enable_2fa', 'Enable Two-Factor Auth', 'toggle', { 
                  help: 'Allow users to enable 2FA' 
                })}
                {renderSettingsField('require_email_verification', 'Require Email Verification', 'toggle', { 
                  help: 'Users must verify email before access' 
                })}
                {renderSettingsField('session_timeout', 'Session Timeout (minutes)', 'number', { 
                  help: 'Auto logout after inactivity', min: 5, max: 1440 
                })}
              </div>
            )}

            {/* Features */}
            {activeCategory === 'features' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Features & Permissions</h2>
                {renderSettingsField('registration_enabled', 'Registration Enabled', 'toggle', { 
                  help: 'Allow new user registration' 
                })}
                {renderSettingsField('messaging_enabled', 'Messaging Enabled', 'toggle', { 
                  help: 'Enable direct messaging' 
                })}
                {renderSettingsField('video_calls_enabled', 'Video Calls Enabled', 'toggle', { 
                  help: 'Enable video calling' 
                })}
                {renderSettingsField('file_sharing_enabled', 'File Sharing Enabled', 'toggle', { 
                  help: 'Allow file sharing' 
                })}
              </div>
            )}

            {/* System Limits */}
            {activeCategory === 'limits' && (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">System Limits</h2>
                {renderSettingsField('max_file_size', 'Max File Size (MB)', 'number', { 
                  help: 'Maximum upload file size', min: 1, max: 100 
                })}
                {renderSettingsField('max_vas_per_page', 'VAs Per Page', 'number', { 
                  help: 'Number of VAs displayed per page', min: 10, max: 100 
                })}
                {renderSettingsField('rate_limit_max_requests', 'Max Requests', 'number', { 
                  help: 'Max requests per rate limit window', min: 10, max: 1000 
                })}
                {renderSettingsField('max_message_length', 'Max Message Length', 'number', { 
                  help: 'Maximum characters in messages', min: 100, max: 10000 
                })}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Success Toast */}
      {saveSuccess && (
        <div className="fixed bottom-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg flex items-center gap-2">
          <CheckCircleIcon className="w-5 h-5" />
          Settings saved successfully
        </div>
      )}
    </div>
  );
};

export default ConsolidatedSettings;